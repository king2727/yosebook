@startuml
'用户服务模块
class UserController {
    updatePassword(User user)//1.更新密码
    login(User user)//2.登陆用户
    regist(User user)//3.注册用户
    activation(String activationCode)//4.激活
    quit()//5.退出
}
interface UserService{
	updatePassword(uid,oldPass,newPass)//1.更新密码
	login(User user)//2.登陆用户
	regist(User user)//3.注册用户
	activation(String code)//4.激活
}
UserController --> UserService
UserService --> UserDao
interface UserDao {
	findByUidAndLoginpass(map)//1.根据用户ID和密码查找
	findByLoginnameAndLoginpass(map)//2.根据登陆名和登录密码查找
	findByCode(code)//3.根据激活码查找
	updateLoginpass(map)//4.更新密码
	updateStatus(map)//5.更新状态
	add(user)//6.添加用户
}
UserDao --> User
class User{
	uid//用户主键
	loginname//登陆名
	loginpass//登陆密码
	email//油箱
	status//状态
	activationCode//激活码

	reloginpass//设置密码
	verifyCode//修改码
	newpass//新密码
}
'类别服务模块
class CategoryController {
	findAll() //1.查找所有类别
}
CategoryController --> CategoryService
interface CategoryService {
    findAll() //1.查找所有类别
	delete(cid) //2.删除类别
	findParents() //3.查找父类别
	findChildrenByParent(pid)//4.根据父类查找子类
	findByParent(String pid)//5.根据父类查找
	edit(category) //6.修改类别
	load(cid) //7.加载类别
	add(category) //8.添加类别
}
CategoryService --> CategoryDao
interface CategoryDao {
	load(cid) //1.加载类别
	findByParent(pid)//2.根据父类查找
	findParents() //3.查找父类别
	add(category) //4.添加类别
	edit(category) //5.修改类别
	findChildrenByParent(pid)//6.根据父类查找子类
	delete(cid) //7.删除类别
}
class Category{
	cid //分类主键
	cname  //分类名
	parent //父分类
	desc //描述
	children  //子分类
}
CategoryDao --> Category
'书本服务模块
class BookController {
    load(String bid)//1.加载书本
    findByCategory()//2.根据类别查找
    findByAuthor()//3.根据作者查找
    findByPress()//4.
    findByBname()//5.根据书名查找
    findByConbination()//6.根据
}
interface BookService {
    load(String bid)//1.加载书本
    findByCategory(String cid, int pc)//2.根据类别查找
    findBookCountByCategory(cid)//3.统计数量根据类别
	findByAuthor(author, int pc)4.查找根据作者
	findByPress(press, int pc)//5.查找根据
	findByBname(bname, int pc)//6.查询根据书名
	findByConbination(criteria, int pc)//7.查询根据
	addBook(book)//8.添加书本
	edit(book)//9.修改书本
	delete(bid)//10.删除书本
}
BookController --> BookService
BookService --> BookDao
interface BookDao {
	findBookTr(map)//1.查找书本
	delete(String bid)//2.删除
	edit(map)//3.修改
	add(map)//4.添加
	findBookCountByCategory(cid)//5.统计数量根据类别
	findByBid(String bid)//6.查询根据主键
	findByCategory(map)//7.查询根据类别
	findByBname(map)//8.查询根据书名
	findByAuthor(map)//9.查询根据作者
	findByPress(map)//10.
	findByCombination(map)//11.
	findByCriteria(map)//12.
}
BookDao --> Book
class Book{
	bid//书本主键
	bname//书名
	author//作者
	price//价格
	currPrice//当前价格
	discount//折扣
	press//
	publishtime//出版时间
	edition//编辑
	pageNum//书页
	wordNum//字数
	printtime//打印时间
	booksize//书大小
	paper//纸张
	category//类别
}
'订单服务模块
class OrderController {
paymentPre(oid) //1.提前支付订单
payment(oid，total,yh)//2.支付订单
back() //3.返回
confirm(oid) // 4.确认订单
cancel(oid)  // 5.取消订单
load(oid,btn) //6.加载订单
createOrder() //7.创建订单
myOrders() //8.我的订单
}

OrderController --> OrderService
OrderController --> CartItemService

interface OrderService {
	updateStatus(oid,status)//1.更新订单状态
	findStatus(oid)//2.查询订单状态
	load(oid)//3.加载订单
	createOrder(order)//4.创建订单
	myOrders(uid,pc)//5.我的订单
	findAll(pc)//6.所有订单
	findByStatus (stauts ,pc)//7.根据状态查找订单
}

OrderService --> OrderDao
OrderService --> OrderItemDao

interface OrderDao {
    updateStatus(map) //1.更新订单状态
	findStatus(oid) //2.查询订单状态
	load(oid)   //3.加载订单
	add(map)    //4.创建订单
	findByStatus(map) //5.根据状态查找订单
	findByUser(map) //6.根据用户查找订单
	findAll(map) // 7.所有订单
	findOrderTr(map) //8.查询订单
}
class Order{
	oid //订单ID
	ordertime //下单时间
	total //金额
	status//订单状态
	address //地址
	owner//订单拥有者
	orderItemList//商品列表
}

OrderDao --> Order

interface OrderItemDao {
	findByOid(oid) //根据订单查找商品
	load(orderItemId) //加载商品
	addOrderItem(mapList) //添加商品
}
OrderItemDao --> OrderItem
class OrderItem{
	orderItemId //商品ID
	quantity //数量
	subtotal //金额
	book //书本
	order//从属订单
}
OrderItem --> Book
'购物车服务模块
class CartItemController{
	loadCartItems(String total)//1.加载商品根据ID
	updateQuantity(）//2.更新数量
	batchDelete(）//3.批次删除根据IDS
	add(）//4.添加商品
	myCart(）//5.我的购物车
}

CartItemController --> CartItemService

interface CartItemService {
	loadCartItems(cartItemIds)//1.加载商品根据ID
	updateQuantity()//2.更新数量
	batchDelete(cartItemIds)//3.批次删除根据IDS
	add(cartItem)//4.添加商品
	myCart(String uid)//5.我的购物车
}

CartItemService --> CartItemDao

interface CartItemDao {
	loadCartItems(Id)//1.加载商品根据ID
	findByCartItemId(Id)//2.查询商品根据ID
	bacthDelete(Ids)//3.批次删除根据IDS
	findByUidAndBid(map)//4.查询根据UID和BID
	updateQuantity(map)//5.更新数量
	addCartItem(map)//6.添加商品进购物车
	findByUser(String uid)//7.查询根据用户
}
CartItemDao --> CartItem

class CartItem {
	cartItemId;//主键
	quantity;  //数量
	book;  //条目图书
	user;  //条目用户
}
@enduml